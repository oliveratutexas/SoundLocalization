/* Auto-generated by genmsg_cpp for file /var/tmp/hark_msgs/srv/HarkIntSrv.srv */
#ifndef HARK_MSGS_SERVICE_HARKINTSRV_H
#define HARK_MSGS_SERVICE_HARKINTSRV_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace hark_msgs
{
template <class ContainerAllocator>
struct HarkIntSrvRequest_ {
  typedef HarkIntSrvRequest_<ContainerAllocator> Type;

  HarkIntSrvRequest_()
  : a(0)
  , b(0)
  {
  }

  HarkIntSrvRequest_(const ContainerAllocator& _alloc)
  : a(0)
  , b(0)
  {
  }

  typedef int64_t _a_type;
  int64_t a;

  typedef int64_t _b_type;
  int64_t b;


  typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HarkIntSrvRequest
typedef  ::hark_msgs::HarkIntSrvRequest_<std::allocator<void> > HarkIntSrvRequest;

typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvRequest> HarkIntSrvRequestPtr;
typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvRequest const> HarkIntSrvRequestConstPtr;



template <class ContainerAllocator>
struct HarkIntSrvResponse_ {
  typedef HarkIntSrvResponse_<ContainerAllocator> Type;

  HarkIntSrvResponse_()
  : result(0)
  {
  }

  HarkIntSrvResponse_(const ContainerAllocator& _alloc)
  : result(0)
  {
  }

  typedef int64_t _result_type;
  int64_t result;


  typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HarkIntSrvResponse
typedef  ::hark_msgs::HarkIntSrvResponse_<std::allocator<void> > HarkIntSrvResponse;

typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvResponse> HarkIntSrvResponsePtr;
typedef boost::shared_ptr< ::hark_msgs::HarkIntSrvResponse const> HarkIntSrvResponseConstPtr;


struct HarkIntSrv
{

typedef HarkIntSrvRequest Request;
typedef HarkIntSrvResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct HarkIntSrv
} // namespace hark_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "36d09b846be0b371c5f190354dd3153e";
  }

  static const char* value(const  ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x36d09b846be0b371ULL;
  static const uint64_t static_value2 = 0xc5f190354dd3153eULL;
};

template<class ContainerAllocator>
struct DataType< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hark_msgs/HarkIntSrvRequest";
  }

  static const char* value(const  ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 a\n\
int64 b\n\
\n\
";
  }

  static const char* value(const  ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9b05623554ab950ed237d43d45f0b4dd";
  }

  static const char* value(const  ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9b05623554ab950eULL;
  static const uint64_t static_value2 = 0xd237d43d45f0b4ddULL;
};

template<class ContainerAllocator>
struct DataType< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hark_msgs/HarkIntSrvResponse";
  }

  static const char* value(const  ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int64 result\n\
\n\
\n\
";
  }

  static const char* value(const  ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hark_msgs::HarkIntSrvRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.a);
    stream.next(m.b);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HarkIntSrvRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hark_msgs::HarkIntSrvResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HarkIntSrvResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<hark_msgs::HarkIntSrv> {
  static const char* value() 
  {
    return "d431cae597499d244ef1c576e21358c8";
  }

  static const char* value(const hark_msgs::HarkIntSrv&) { return value(); } 
};

template<>
struct DataType<hark_msgs::HarkIntSrv> {
  static const char* value() 
  {
    return "hark_msgs/HarkIntSrv";
  }

  static const char* value(const hark_msgs::HarkIntSrv&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d431cae597499d244ef1c576e21358c8";
  }

  static const char* value(const hark_msgs::HarkIntSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hark_msgs::HarkIntSrvRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hark_msgs/HarkIntSrv";
  }

  static const char* value(const hark_msgs::HarkIntSrvRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d431cae597499d244ef1c576e21358c8";
  }

  static const char* value(const hark_msgs::HarkIntSrvResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<hark_msgs::HarkIntSrvResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hark_msgs/HarkIntSrv";
  }

  static const char* value(const hark_msgs::HarkIntSrvResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // HARK_MSGS_SERVICE_HARKINTSRV_H

