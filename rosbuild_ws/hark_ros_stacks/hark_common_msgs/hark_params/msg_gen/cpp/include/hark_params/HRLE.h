/* Auto-generated by genmsg_cpp for file /var/tmp/hark_params/msg/HRLE.msg */
#ifndef HARK_PARAMS_MESSAGE_HRLE_H
#define HARK_PARAMS_MESSAGE_HRLE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace hark_params
{
template <class ContainerAllocator>
struct HRLE_ {
  typedef HRLE_<ContainerAllocator> Type;

  HRLE_()
  : lx(0.0)
  , time_constant(0.0)
  {
  }

  HRLE_(const ContainerAllocator& _alloc)
  : lx(0.0)
  , time_constant(0.0)
  {
  }

  typedef float _lx_type;
  float lx;

  typedef float _time_constant_type;
  float time_constant;


  typedef boost::shared_ptr< ::hark_params::HRLE_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hark_params::HRLE_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct HRLE
typedef  ::hark_params::HRLE_<std::allocator<void> > HRLE;

typedef boost::shared_ptr< ::hark_params::HRLE> HRLEPtr;
typedef boost::shared_ptr< ::hark_params::HRLE const> HRLEConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::hark_params::HRLE_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::hark_params::HRLE_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace hark_params

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::hark_params::HRLE_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::hark_params::HRLE_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::hark_params::HRLE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d573ce11b1610cdf85e2c98f807f43dc";
  }

  static const char* value(const  ::hark_params::HRLE_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd573ce11b1610cdfULL;
  static const uint64_t static_value2 = 0x85e2c98f807f43dcULL;
};

template<class ContainerAllocator>
struct DataType< ::hark_params::HRLE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "hark_params/HRLE";
  }

  static const char* value(const  ::hark_params::HRLE_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::hark_params::HRLE_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 lx\n\
float32 time_constant\n\
\n\
";
  }

  static const char* value(const  ::hark_params::HRLE_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::hark_params::HRLE_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::hark_params::HRLE_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.lx);
    stream.next(m.time_constant);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct HRLE_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hark_params::HRLE_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::hark_params::HRLE_<ContainerAllocator> & v) 
  {
    s << indent << "lx: ";
    Printer<float>::stream(s, indent + "  ", v.lx);
    s << indent << "time_constant: ";
    Printer<float>::stream(s, indent + "  ", v.time_constant);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HARK_PARAMS_MESSAGE_HRLE_H

